# # This file is a template, and might need editing before it works on your project.
# # You can copy and paste this template into a new `.gitlab-ci.yml` file.
# # You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
# #
# # To contribute improvements to CI/CD templates, please follow the Development guide at:
# # https://docs.gitlab.com/development/cicd/templates/
# # This specific template is located at:
# # https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Nodejs.gitlab-ci.yml

# # stages:
# #     - build
# #     - test
# #     - package
# #     - deploy_dev
# #     - deploy_staging
# #     - deploy_prod

stages:
  - prepare
#     - build
  - test
  - quality
  - security
#     - package
  # - deploy
#     - notify

  # - build
  # - test
  # - quality
  # - security
#     - package
  # - deploy
#     - notify

# # Official framework image. Look for the different tagged releases at:
# # https://hub.docker.com/r/library/node/tags/
image: node:23-bookworm-slim

# # Pick zero or more services to be used on all builds.
# # Only needed when using a docker container to run your tests in.
# # Check out: https://docs.gitlab.com/ee/ci/services/
# services:
# #   - mysql:latest
# #   - redis:latest
# #   - postgres:latest

# # This folder is cached between builds
# # https://docs.gitlab.com/ee/ci/yaml/#cache
cache:
  paths:
    - node_modules/

variables:
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Defines the location of the analysis task cache
  GIT_DEPTH:
    "0" # Tells git to fetch all the branches of the project, required by the analysis task
    # NODE_ENV: production
    # DOCKER_IMAGE: registry.gitlab.com/$CI_PROJECT_PATH/app:$CI_COMMIT_SHORT_SHA

# ---- PREPARE ----
install_dependencies:
  stage: prepare
  image: docker:20.10.24
  services:
    - docker:dind
  script:
    - echo "Installing dependencies"
    - docker run -d -p 3000:3000 bkimminich/juice-shop 
  # stage: prepare
  # script:
  #   - npm ci --ignore-scripts
  #   - npm run dev & # Start the app in the background
  #   - sleep 10 # Wait for the app to start (optional, adjust as needed
  # artifacts:
  #   paths:
  #     - node_modules/
  #   expire_in: 1 hour

# # ---- BUILD ----
# build:
#     stage: build
#     image: node:20
#     script:
#         - npm run build
#     needs: [install_dependencies]
#     artifacts:
#         paths:
#             - dist/
#         expire_in: 1 hour

# ---- TEST ----
# unit_test:
#   stage: test
#   script:
#     - npm run test
#   needs: [install_dependencies]

# playwright_test:
#   stage: test
#   image: mcr.microsoft.com/playwright:v1.54.0-noble
#   script:
#     - npm run playwright
#   needs: [install_dependencies]
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'


# ---- QUALITY ----

# npm_audit:
#   stage: quality
#   script:
#     - npm audit --audit-level=moderate
#   allow_failure: false

# TODO: pause for now
# sonarcloud-check:
#   image:
#     name: sonarsource/sonar-scanner-cli:latest
#     entrypoint: [""]
#   cache:
#     key: "${CI_JOB_NAME}"
#     paths:
#       - .sonar/cache
#   stage: quality
#   script:
#     - echo 'sonarqube'
#     - sonar-scanner
#   only:
#     - merge_requests
#     - main


# ---- SECURITY ----
owap_zap:
    stage: security
    image: zaproxy/zap-stable
    allow_failure: true
    before_script:
    - mkdir -p /zap/wrk
    script:
        
        - echo 'owap zap'
        - zap-baseline.py -t http://172.0.0.1:3000/ -g gen.conf -r zap-report.html
        - cp /zap/wrk/zap-report.html .
        # full scan: zap-full-scan.py
        # api scan: zap-full-scan.py
    needs:
      - job: install_dependencies
    artifacts:
        expire_in: "30 days"
        when: always
        reports:
          dast: zap-report.html
        paths:
          - zap-report.html
    # only:
    # - main

# trivy_scan_nodejs:
#   stage: security
#   image: aquasec/trivy:latest
#   script:
#     - trivy fs --format table -o fs.html --exit-code 1 --severity HIGH,CRITICAL --ignore-unfixed .
#   allow_failure: false
#   rules:
#     - if: '$CI_COMMIT_BRANCH == "main"'
# gitleaks_scan:
#   stage: security
#   image: zricethezav/gitleaks:latest
#   script:
#     - gitleaks detect --source . --exit-code 1 --no-git --redact
#   allow_failure: false
#   rules:
#     - if: '$CI_COMMIT_BRANCH == "main"'
#     - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
# # sast_scan:
# #     stage: security
# #     image: node:20
# #     script:
# #         - npm install -g snyk
# #         - snyk test --severity-threshold=medium
# #     only:
# #         - merge_requests
# #         - main
# #     allow_failure: true # Optional: avoid blocking MR if test fails

# dependency_check:
#     stage: security
#     image: node:20
#     script:
#         - npm audit --audit-level=moderate
#     allow_failure: false

# # ---- PACKAGE ----
# docker_build:
#     stage: package
#     image: docker:latest
#     services:
#         - docker:dind
#     script:
#         - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
#         - echo "trivy"
#         # Scan the local image before pushing
#         - apk add --no-cache curl  # Alpine needed to download Trivy
#         - curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
#         - trivy image --exit-code 1 --severity HIGH,CRITICAL myimage:local
#         # If scan passed, tag & push
#         - docker build -t $DOCKER_IMAGE .
#         - docker push $DOCKER_IMAGE
#     only:
#         - main

# ---- DEPLOY ----
# run_app:
#   stage: deploy
#   services:
#     - docker:dind
#   image: docker:latest
#   variables:
#     DOCKER_HOST: tcp://docker:2375/
#     DOCKER_DRIVER: overlay2
#   script:
#     - docker compose -f compose.prod.yml up -d
#     - sleep 15  # wait for app to start
         # wait for app
# deploy_staging:
#     stage: deploy
#     script:
#         - echo "Deploying to staging"
#         - kubectl set image deployment/node-app node=$DOCKER_IMAGE --record
#     environment:
#         name: staging
#         url: https://staging.example.com
#     only:
#         - main
#     when: manual # Optional approval step

# update_manifest_repo:
#   stage: update-manifest
#   image: alpine/git
#   needs:
#     - deploy_staging
#   script:
#     - apk add --no-cache git
#     - git config --global user.email "ci-bot@example.com"
#     - git config --global user.name "CI Bot"
#     - git clone https://gitlab.com/your-group/k8s-manifest-repo.git
#     - cd k8s-manifest-repo
#     # e.g., update image tag in deployment.yaml
#     - sed -i "s|image: your-image:.*|image: your-image:$CI_COMMIT_SHORT_SHA|" deployment.yaml
#     - git add deployment.yaml
#     - git commit -m "Update deployment image tag to $CI_COMMIT_SHORT_SHA"
#     - git push https://$CI_JOB_TOKEN@gitlab.com/your-group/k8s-manifest-repo.git HEAD:main
#   only:
#     - main
#   when: on_success

# deploy_staging:
#     stage: deploy
#     script:
#         - echo "Deploying to staging"
#         - kubectl set image deployment/node-app node=$DOCKER_IMAGE --record
#     environment:
#         name: staging
#         url: https://staging.example.com
#     only:
#         - main
#     when: manual # Optional approval step

# deploy_prod:
#     stage: deploy
#     script:
#         - echo "Deploying to production"
#         - kubectl set image deployment/node-app node=$DOCKER_IMAGE --record
#     environment:
#         name: production
#         url: https://example.com
#     only:
#         - tags
#     when: manual

# # ---- NOTIFY ----
# slack_notify:
#     stage: notify
#     script:
#         - curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"Pipeline finished for commit $CI_COMMIT_SHORT_SHA\"}" "$SLACK_WEBHOOK"
#     when: always
# # build:
# #     stage: build
# #     script:
# #         - echo 'build'

# # unit_test:
# #     stage: test
# #     script:
# #         - echo 'test'

# # build_image:
# #     stage: package
# #     script:
# #         - echo 'build image'

# # trivy:
# #     stage: package
# #     script:
# #         - echo 'scan image'
# #     needs:
# #         - job: build_image

# # deploy_dev:
# #     stage: deploy_dev
# #     script:
# #         - echo "dev"
# #         - mkdir build
# #     environment: dev
# #     artifacts:
# #         paths:
# #             - build/
# #         expire_in: 2 weeks
# #     only:
# #         - main
# #         - tags

# # deploy_staging:
# #     stage: deploy_staging
# #     script: echo "staging"
# #     environment: staging
# #     when: manual
# #     only:
# #         - main

# # deploy_prod:
# #     stage: deploy_prod
# #     script: echo "prod"
# #     environment: prod
# #     when: manual
# #     only:
# #         - main
